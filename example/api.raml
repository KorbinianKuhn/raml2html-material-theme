#%RAML 1.0
title: Example
version: v1
baseUri: https://{environment}.example.com/api/example/{version}
baseUriParameters:
  environment:
    type: string
    enum: [ "dev", "test", "prod" ]
protocols: [  HTTPS, HTTP/2 ]
mediaType: [ application/json, application/xml ]
documentation:
  - title: Getting Started
    content: |
      # Headline
      ## Subheadline
      This is an example API to test all raml functionalities and the material theme. Check the /users POST route to get a complex modal with many information.

securitySchemes:
  oauth_1_0:
    description: |
      OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
    type: OAuth 1.0
    settings:
      requestTokenUri: https://example.com/api/oauth/v1/request_token
      authorizationUri: https://example.com/api/oauth/v1/authorize
      tokenCredentialsUri: https://example.com/api/oauth/v1/access_token
      signatures: [ 'HMAC-SHA1', 'PLAINTEXT' ]
  oauth_2_0:
    description: |
      Use OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
             Used to send a valid OAuth 2 access token. Do not use
             with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
             Used to send a valid OAuth 2 access token. Do not use with
             the "Authorization" header.
          type: string
      responses:
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox
              revoked or expired an access token. To fix, re-authenticate
              the user.
        403:
          description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://example.com/api/oauth2/v1/authorize
      accessTokenUri: https://example.com/api/pauth2/v1/token
      authorizationGrants: [ authorization_code, implicit, 'urn:ietf:params:oauth:grant-type:saml2-bearer' ]

securedBy: oauth_2_0
securedBy: oauth_1_0

/info:
    options: 
        description: Options request.
        securedBy: null
    head: Head request.

/users:
    get: 
        description: Get all users.
        queryParameters:
            limit:
                description: Limit the amount of returned users to this number.
                required: false
                type: integer
                example: 50
    post: 
        description: Add new user.
        body:
            application/json:
                type: object
                properties:
                    email:
                        description: Email address of the user.
                        type: string
                        required: true
                        pattern: /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i
                        examples:
                            first: jane.doe@example.com
                            second: john.doe@example.com
                            third:
                                description: Another Example
                                value: janeandjohn@example.com
                    password:
                        description: Password of the user.
                        type: string
                        required: true
                        minLength: 6
                        maxLength: 20
                    age:
                        description: Age of the user.
                        type: integer
                        required: false
                        minimum: 10
                        maximum: 110
                        default: 0
                    gender:
                        description: Status of the user.
                        enum: ["active", "inactive"]
                        required: false
                    hobbies:
                        description: Hobbies of the user.
                        type: array[string]
                        required: false
                    languages:
                        description: Languages the user speaks
                        type: array
                        minItems: 1
                        uniqueItems: true
                        items: string
                    name:
                        description: Name of the user.
                        type: object
                        required: false
                        properties:
                            firstname:
                                description: First name.
                                example: "Jane"
                                required: false
                            lastname:
                                description: Last name.
                                example: "Doe"
                                required: false
                    size:
                        description: Size of the user.
                        type: number
                        required: false
                        minimum: 50.0
                        maximum: 100.0
                    metadata: any
                    birthday: date
                    union: date | integer
                    nil: nil
                    file: file
                    boolean: boolean
                examples: 
                    full: {"email": "jane.doe@example.com", "password": "secret", "age": 99, "status": "active", "hobbies": [ "cooking", "programming"], "name": {"firstname": "Jane", "lastname": "Doe"}}
                    minimum: {"email": "jane.doe@example.com", "password": "secret", "age": null}
        responses:
            200:
                description: "Successfully registered new user."
                headers:
                    Authorization:
                        description: |
                            Used to send a valid OAuth 2 access token. Do not use
                            with the "access_token" query string parameter.
                        type: string
                body:
                    application/json: 
                        example: {"success": "true"}
                    application/xml:
                        example: <?xml version="1.0" ?><xml><success>True</success></xml>
            400:
                description: "Bad Request"
            401:
                description: "Unauthorized."
    /{id}:
        uriParameters:
            id:
                description: The id of the user.
                type: integer
                required: true
                example: 0
        delete: 
            description: Delete user by id.
        patch: Change specific value by user id.
        put: Change user by id.
        /messages:
            get: Get all messages from user.